if(x>3) {
y <- 10
} else {
y <- 0
}
x <- 25
y <- if(x>3) {
10
} else {
0
}
y
for(i in 1:10) {
print(i)
}
x <- c("a", "b", "c", "d")
for(i in 1:4) {
print(x[i])
}
for(i in seq_along(x)) {
print(x[i])
}
for(letter in x) {
print(letter)
}
for(i in 1:4) print(x[i])
x <- matrix(1:6, 2, 3)
x
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(x[i, j])
}
}
count <- 0
while(count < 10) {
print(count)
count <- count + 1
}
coin <- rbinom(1, 1, 0.5)
coin
coin
coin
coin
coin
z <- 5
while(z >= 3 && z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if(coin == 1) {
z <- z+1
} else {
z <- z-1
}
}
x0 <- 1
tol <- 1e-8
repeat {
x1 <- comupteEstimate()
if(abs(x1 - x0) < tol) {
break
} else {
x0 <- x1
}
}
x0 <- 1
tol <- 1e-8
repeat {
x1 <- computeEstimate()
if(abs(x1 - x0) < tol) {
break
} else {
x0 <- x1
}
}
for(i in 1:10) {
if(i <= 5) {
next
}
print(i)
}
formals
formals(colMeans)
mydata <- rnorm(100)
mydata
sd(mydata)
sd(x = mydata)
sd(x = mydata, na.rm = FALSE)
formals(sd)
args(lm)
formals(lm)
f <- function(a, b = 1, c = 2, d = NULL) {
}
f
f <- function(a, b) {
a^2
}
f(5)
myplot <- function(x, y, type = "1", ...) {
plot(x, y, type = type, ...)
}
x <- 1:10
x
if(x > 5) {
x <- 0
}
if(x > 5) {
q()
q()
}
q()
search()
q()
?path
}
}
for(i in id)
{meani <- means(pollutant, na.rm = FALSE)}
?rbind
?read.csv
?complete.cases
?do.call
?aggregate
x <- matrix(c(9, 12, 13, 14, 15, na, 29, na, na), 3, 3)
x <- matrix(c(9, 12, 13, 14, 15, NA, 29, NA, NA), 3, 3)
x
na.omit(x)
nonadata <- na.omit(dataset)
nonadata <- na.omit(x)
nonadata
?na.omit
nonadata
x = NA
?complete.cases
y <- complete.cases(x)
y
x <- airquality[, -1]
y <- airquality[, 1]
x
y
stopifnot(complete.cases(y) != is.na(y))
ok <- complete.cases(x, y)
sum(!ok)
pollutantmean <- function(directory, pollutant, id = 1:332) {
data = numeric()
for(i in id) {
need = read.csv(paste(directory, "/", format(i, width = 3, flat = "0"), ".csv", sep = ""))
data = c(data, need[[pollutant]])
}
return(mean(data, na.rm = TRUE))
}
pollutantmean("specdata", "nitrate", 23)
pollutantmean <- function(directory, pollutant, id = 1:332) {
data = numeric()
for(i in id) {
need = read.csv(paste("/", format(i, width = 3, flat = "0"), ".csv", sep = ""))
data = c(data, need[[pollutant]])
}
return(mean(data, na.rm = TRUE))
}
pollutantmean("specdata", "nitrate", 23)
pollutantmean <- function(directory, pollutant, id = 1:332) {
data = lapply(id, function(i) read.csv(paste("/", formatC(i, width = 3, flag = "0"), ".csv", sep = ""))[[pollutant]])
return(mean(unlist(data), na.rm = TRUE))
}
pollutantmean("specdata", "nitrate", 23)
?formatC
?return
?unlist
?cor
?complete
??complete
?sprintf
?cat
## This pair of functions cache the inverse of a matrix.
## The first function creates a special matrix object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function computes the inverse of the special matrix returned by makeCasheMatrix above.
## It first checks to see if the inverse has already been calculated.
## If so, it gets the inverse from the cache and skips the computation.
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cashed data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
a <- makeCacheMatrix()
a
a$set(matrix(1:6, 2, 3))
a$get
cachesolve(a)
cacheSolve(a)
a < makeCacheMatrix()
a <- makeCacheMatrix()
a$set(matrix(1:9, 3, 3))
a$get
cacheSolve(a)
b <- makeCacheMatrix()
b$set(matrix(2:5, 2, 2))
b$get
cacheSolve(b)
cacheSolve(b)
getwd()
x <- c(70, 20, 20, 0)
class(x)
data <- read.table("household_power_consumption.txt", header = TRUE, nrows = 70000, comment.char = "")
head(data)
cleandata <- subset(data, Date = c("01/02/2007", "02/02/2007"))
head(cleandata)
?subset
cleandata <- subset(data, Date == c("01/02/2007", "02/02/2007"))
colnames(data)
data <- read.table("household_power_consumption.txt", header = TRUE, nrows = 70000, comment.char = "", sep = "")
colnames(data)
colnames(dat) <-names(read.table('household_power_consumption.txt', header=TRUE,sep=";",nrows=1))
colnames(data) <-names(read.table('household_power_consumption.txt', header=TRUE,sep=";",nrows=1))
setwd("D:/BYN/data/peer1")
data <- read.csv("activity.csv")
setwd("C:/Users/BYN/RepData_PeerAssessment1")
